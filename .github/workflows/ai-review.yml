name: AI Code Review

on:
  push:
    branches: ['**']
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.gif'
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master]
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      max-parallel: 1
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Compute DIFF SHAs
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.sha }}"
          else
            BEFORE="${{ github.event.before }}"
            if [ -z "$BEFORE" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
              if git rev-parse HEAD~1 >/dev/null 2>&1; then
                BASE="$(git rev-parse HEAD~1)"
              else
                BASE="${{ github.sha }}"
              fi
            else
              BASE="$BEFORE"
            fi
            HEAD="${{ github.sha }}"
          fi
          echo "BASE=$BASE" >> "$GITHUB_ENV"
          echo "HEAD=$HEAD" >> "$GITHUB_ENV"
          echo "Using BASE=$BASE HEAD=$HEAD"

      # Preflight: skip politely if secrets missing (forked PRs)
      - name: Preflight secrets & API
        if: ${{ github.event_name == 'pull_request' }}
        env:
          OPENAI_API_KEY:  ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
        shell: bash
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "::warning::OPENAI_API_KEY missing. Likely a forked PR. Skipping AI review."
            echo "SKIP_AI_REVIEW=1" >> "$GITHUB_ENV"
            exit 0
          fi
          BASE_URL="${OPENAI_BASE_URL:-https://api.openai.com/v1}"
          curl -sS "$BASE_URL/models" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" | head -n 3 || true

      - name: Debug config (no secrets printed)
        shell: bash
        run: |
          echo "MODEL=${OPENAI_MODEL:-unset}"
          echo "BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}"
          echo "PREFER_PPLX=${PREFER_PPLX:-0}"
          for v in OPENAI_MAX_TOKENS OPENAI_TEMPERATURE OPENAI_MAX_ATTEMPTS OPENAI_BACKOFF_CAP_SEC CHARS_PER_CHUNK REVIEW_CACHE_TTL_SEC; do
            if [ -n "${!v}" ]; then echo "$v=set"; else echo "$v=EMPTY"; fi
          done

      - name: Run AI reviewer
        if: ${{ github.event_name == 'pull_request' && env.SKIP_AI_REVIEW != '1' }}
        continue-on-error: true
        env:
          # OpenAI (Secrets → Vars → default)
          OPENAI_API_KEY:         ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL:        ${{ secrets.OPENAI_BASE_URL }}
          OPENAI_MODEL:           ${{ secrets.OPENAI_MODEL || vars.OPENAI_MODEL || 'gpt-5-mini' }}
          OPENAI_TEMPERATURE:     ${{ secrets.OPENAI_TEMPERATURE || vars.OPENAI_TEMPERATURE || 0.2 }}
          OPENAI_MAX_TOKENS:      ${{ secrets.OPENAI_MAX_TOKENS || vars.OPENAI_MAX_TOKENS || 700 }}
          OPENAI_PRE_DELAY_SEC:   ${{ secrets.OPENAI_PRE_DELAY_SEC || vars.OPENAI_PRE_DELAY_SEC || 0 }}
          OPENAI_MAX_ATTEMPTS:    ${{ secrets.OPENAI_MAX_ATTEMPTS || vars.OPENAI_MAX_ATTEMPTS || 6 }}
          OPENAI_BACKOFF_CAP_SEC: ${{ secrets.OPENAI_BACKOFF_CAP_SEC || vars.OPENAI_BACKOFF_CAP_SEC || 25 }}

          # Chunking + cache
          CHARS_PER_CHUNK:        ${{ secrets.CHARS_PER_CHUNK || vars.CHARS_PER_CHUNK || 6000 }}
          REVIEW_CACHE_TTL_SEC:   ${{ secrets.REVIEW_CACHE_TTL_SEC || vars.REVIEW_CACHE_TTL_SEC || 0 }}
          REVIEW_CACHE_BUSTER:    ${{ secrets.REVIEW_CACHE_BUSTER || vars.REVIEW_CACHE_BUSTER || '' }}

          # Perplexity (opt-in)
          PREFER_PPLX:            ${{ vars.PREFER_PPLX || '0' }}
          PPLX_API_KEY:           ${{ secrets.PPLX_API_KEY }}
          PPLX_BASE_URL:          ${{ secrets.PPLX_BASE_URL }}
          PPLX_MODEL:             ${{ secrets.PPLX_MODEL }}

          # Generic fallback (unused unless wired)
          LLM_API_KEY:            ${{ secrets.LLM_API_KEY }}
          LLM_API_BASE:           ${{ secrets.LLM_API_BASE }}
        run: |
          python -m src.reviewer --base "$BASE" --head "$HEAD" || \
            echo "::warning::AI reviewer failed (transient?). Report may be partial."

      - name: Upload review report (artifact)
        if: ${{ github.event_name == 'pull_request' && env.SKIP_AI_REVIEW != '1' }}
        uses: actions/upload-artifact@v4
        with:
          name: ai_review_report
          path: ai_review_report.md
          if-no-files-found: warn

      - name: Run Git Insights (generate insights.json)
        if: ${{ github.event_name == 'pull_request' }}
        run: python -m project.cli --limit 100 --out insights.json || echo "Git Insights failed"

      - name: Upload Git Insights (artifact)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: git_insights
          path: insights.json
          if-no-files-found: warn

      - name: Comment on PR with review
        if: ${{ github.event_name == 'pull_request' && env.SKIP_AI_REVIEW != '1' }}
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const core = require('@actions/core');
            try {
              if (fs.existsSync('ai_review_report.md')) {
                const body = fs.readFileSync('ai_review_report.md','utf8');
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body
                });
              } else {
                core.warning('ai_review_report.md not found; skipping PR comment.');
              }
            } catch (e) {
              core.warning(`Failed to comment on PR: ${e?.message || e}`);
            }

      - name: Push workflow placeholder
        if: ${{ github.event_name == 'push' }}
        run: echo "Push workflow completed (AI review runs on PRs)."
