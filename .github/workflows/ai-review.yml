name: AI Code Review

on:
  # Show checks on every commit (lightweight path)
  push:
    branches: ['**']
  # Run the full AI review only on PRs
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, master ]
  # Manual run button in the Actions tab
  workflow_dispatch: {}

# Cancel older runs for the same ref to avoid queues / extra API calls
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Install deps only for PRs (push jobs stay fast)
      - name: Install deps
        if: ${{ github.event_name == 'pull_request' }}
        run: pip install -r requirements.txt

      - name: Compute DIFF SHAs
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "BASE=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV
            echo "HEAD=${{ github.sha }}" >> $GITHUB_ENV
          else
            BEFORE="${{ github.event.before }}"
            if [ -z "$BEFORE" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
              if git rev-parse HEAD~1 >/dev/null 2>&1; then
                echo "BASE=$(git rev-parse HEAD~1)" >> $GITHUB_ENV
              else
                echo "BASE=${{ github.sha }}" >> $GITHUB_ENV
              fi
            else
              echo "BASE=$BEFORE" >> $GITHUB_ENV
            fi
            echo "HEAD=${{ github.sha }}" >> $GITHUB_ENV
          fi
          echo "Using BASE=$BASE HEAD=$HEAD"

      # --- PR-only heavy steps below ----------------------------------------

      - name: Run AI reviewer
        if: ${{ github.event_name == 'pull_request' }}
        env:
          # Secrets (provider auth)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_API_BASE: ${{ secrets.LLM_API_BASE }}
          # Tunables (safe to store as repo "Variables" in Actions)
          OPENAI_TEMPERATURE: ${{ vars.OPENAI_TEMPERATURE }}
          OPENAI_MAX_TOKENS: ${{ vars.OPENAI_MAX_TOKENS }}
          OPENAI_PRE_DELAY_SEC: ${{ vars.OPENAI_PRE_DELAY_SEC }}
          OPENAI_MAX_ATTEMPTS: ${{ vars.OPENAI_MAX_ATTEMPTS }}
          OPENAI_BACKOFF_CAP_SEC: ${{ vars.OPENAI_BACKOFF_CAP_SEC }}
        run: python -m src.reviewer --base "$BASE" --head "$HEAD"

      - name: Upload review report (artifact)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ai_review_report
          path: ai_review_report.md
          if-no-files-found: warn

      - name: Run Git Insights (generate insights.json)
        if: ${{ github.event_name == 'pull_request' }}
        run: python -m project.cli --limit 100 --out insights.json || echo "Git Insights failed"

      - name: Upload Git Insights (artifact)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: git_insights
          path: insights.json
          if-no-files-found: warn

      - name: Comment on PR with review
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('ai_review_report.md','utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      # Push-only placeholder so you still get yellow/green on commits
      - name: Push workflow placeholder
        if: ${{ github.event_name == 'push' }}
        run: echo "Push workflow completed (AI review runs on PRs)."
